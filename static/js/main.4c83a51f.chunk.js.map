{"version":3,"sources":["components/Header.js","components/Rules.js","components/Scores.js","components/ImageRow.js","components/Images.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Rules","Scores","msg","current","high","ImageRow","Fragment","images","map","image","index","key","src","alt","id","onClick","Images","chunkedImages","myArray","chunk_size","arrayLength","length","tempArray","myChunk","slice","push","chunkArray","row","components_ImageRow","imageArray","prodImages","App","state","highScore","currentScore","clicked","handleImageClick","clickedId","clickedImages","_this","includes","handleWrongGuess","handleGoodGuess","setState","shuffleImages","arr","score","i","j","Math","floor","random","temp","this","components_Header","components_Rules","components_Scores","components_Images","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4c83a51f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <h1 className=\"cyan-text text-lighten-5\">Memory Games</h1>  \r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Rules = (props) => {\r\n    return(\r\n        <div className=\"col s6\">\r\n        <h5>Click on an image to get a point. Each click shuffles the images. If you click on the same image a second time, the game is over!</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Rules;","import React from 'react';\r\n\r\nconst Scores = (props) => {\r\n    return(\r\n        <div className=\"col s6\">\r\n        <h4>{props.msg}</h4>\r\n        <h4>Current: {props.current}</h4>\r\n        <h4>High Score: {props.high}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scores;","import React from 'react';\r\n\r\nconst ImageRow = (props) => {\r\n\r\n    return (\r\n        <>\r\n            {props.images.map((image, index) => <div className=\"col s3\" key={index}><img src={image.src} alt={image.id} key={image.id} onClick={() => props.onClick(image.id)} /></div>)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ImageRow;","import React from 'react';\r\nimport ImageRow from './ImageRow';\r\n\r\nfunction chunkArray(myArray, chunk_size) {\r\n    var index = 0;\r\n    var arrayLength = myArray.length;\r\n    var tempArray = [];\r\n\r\n    for (index = 0; index < arrayLength; index += chunk_size) {\r\n        let myChunk = myArray.slice(index, index + chunk_size);\r\n        tempArray.push(myChunk);\r\n    }\r\n\r\n    return tempArray;\r\n}\r\n\r\nconst Images = (props) => {\r\n\r\n    const images = props.images;\r\n    const chunkedImages = chunkArray(images, 4);\r\n    return (\r\n        <>\r\n            {chunkedImages.map((row, index) => <div className=\"row\" key={index}>\r\n                <ImageRow images={row} onClick={props.onClick} />\r\n            </div>)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Images;","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Rules from './components/Rules';\nimport Scores from './components/Scores';\nimport Images from './components/Images';\nimport prodImages from './images.json';\nimport devImages from './imagesDEV.json';\nvar imageArray = [];\n\nif (process.env.NODE_ENV === 'production') {\n  imageArray = prodImages;\n} else {\n  imageArray = devImages;\n}\n\nclass App extends React.Component {\n  state = {\n    highScore: 0,\n    currentScore: 0,\n    clicked: [],\n    msg: <span className='purple-text text-darken-4'>Start Clicking!</span>,\n    images: imageArray\n  }\n\n  componentDidMount() {\n    this.setState({ images: this.shuffleImages(imageArray) });\n  }\n\n  handleImageClick = (id) => {\n    const clickedId = id;\n    const clickedImages = this.state.clicked;\n    if (clickedImages.includes(clickedId)) {\n      this.handleWrongGuess(clickedId);\n    } else {\n      this.handleGoodGuess(clickedId, clickedImages);\n    }\n\n  }\n\n  handleWrongGuess = (id) => {\n    this.setState({\n      clicked: [],\n      currentScore: 0,\n      msg: <span className='red-text text-darken-4'>Incorrect Guess!</span>,\n      images: this.shuffleImages(imageArray)\n    });\n  }\n\n  handleGoodGuess = (id, arr) => {\n    const score = this.state.currentScore + 1;\n    let high = this.state.highScore;\n    if (score > high) {\n      high = score;\n    }\n    arr.push(id);\n    this.setState({\n      clicked: arr,\n      highScore: high,\n      currentScore: score,\n      msg: <span className='green-text text-darken-4'>Good Guess!</span>,\n      images: this.shuffleImages(imageArray)\n    });\n  }\n\n  shuffleImages = images => {\n    let i = images.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = images[i];\n      images[i] = images[j];\n      images[j] = temp;\n      i--;\n    }\n    return images;\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"container blue-grey lighten-3 section\">\n          <div className=\"row\">\n            <Rules />\n            <Scores msg={this.state.msg} current={this.state.currentScore} high={this.state.highScore} />\n          </div>\n          <Images images={this.state.images} onClick={this.handleImageClick} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}